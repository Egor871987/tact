name: Tact CI

env:
  HUSKY: 0

on:
  pull_request:
    branches: ["**"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# All unset values default to none
# https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#permissions
permissions: read-all

jobs:
  backwards-compat:
    strategy:
      fail-fast: false
      matrix:
        node-version: [18]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # without caching

      - name: Backwards compatibility tests
        run: |
          # Temporarily ignore engines
          yarn config set ignore-engines true
          # Install dependencies, gen and build the compiler
          yarn install
          yarn clean
          yarn cross-env BUILD_THREADS=4 yarn gen
          yarn build
          # Test some specific things for backwards compatibility.
          # It's important to restrain from using too much of Node.js 22+ features
          # until it goes into maintenance LTS state and majority of users catches up
          yarn cross-env NODE_OPTIONS=--max_old_space_size=4096 jest isSubsetOf
          # Clean-up
          yarn cleanall
          yarn config delete ignore-engines

  forward-compat:
    strategy:
      fail-fast: false
      matrix:
        node-version: [23]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # without caching

      - name: Forward compatibility tests
        run: |
          # Install dependencies and perform some steps of the build pipeline,
          # skipping the contract generation and the final `yarn build` step
          yarn install
          yarn gen:grammar
          yarn gen:stdlib
          yarn gen:func-js
          # Clean-up
          yarn cleanall

  test:
    strategy:
      fail-fast: false
      matrix:
        node-version: [22]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test
      - name: Test compatibility with tact-template
        run: |
          # NOTE:
          # The ${{}} here and elsewhere is a templating syntax that allows injecting strings
          # into the code of the resulting action. This is handy for keeping workflows together
          # and using their default shells (PowerShell on Windows, Bash/Zsh elsewhere)
          #
          # Making PowerShell fail on errors
          ${{ matrix.os != 'windows-latest' && '$ErrorActionPreference = "Stop"' || '' }}
          git clone https://github.com/tact-lang/tact-template.git
          cd tact-template
          # Hijacking the dependency on Tact to avoid redundant npm downloads
          jq 'del(.dependencies."@tact-lang/compiler")' package.json ${{
            matrix.os == 'windows-latest' # this template allows to adjust a part of the command
            && '-M | Set-Content'
            || '>' }} temp.json
          ${{
            matrix.os == 'windows-latest'
            && 'Move-Item -Force temp.json package.json' # this will be executed on Windows
            || 'mv -f temp.json package.json'            # and this â€” elsewhere
          }}
          yarn link @tact-lang/compiler
          yarn install
          yarn build
          yarn test

  test-blueprint:
    strategy:
      fail-fast: false
      matrix:
        node-version: [22]
        os: [ubuntu-latest, windows-latest, macos-latest]
        package-manager: [npm, yarn, pnpm, bun]
        # follow-up ifs are for ensuring clean state at all times
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn" # dependency caching only

      - uses: oven-sh/setup-bun@v2
        if: ${{ matrix.package-manager == 'bun' }}

      - name: Setup PNPM
        if: ${{ matrix.package-manager == 'pnpm' }}
        run: |
          # Installing the specific pnpm version to work around https://github.com/pnpm/pnpm/issues/5000
          # and not fail suddenly when a release comes that fixes this
          # NOTE: revisit and simplify this step if/when those bugs with pnpm are resolved
          npm i -g pnpm@9.12.2
          # To help pnpm recognize the shell (they cannot do it themselves sometimes...)
          ${{ matrix.os != 'windows-latest' && 'export SHELL=bash' || '' }}
          pnpm setup -f
          # To source .bashrc on Linux:
          ${{ matrix.os == 'ubuntu-latest' && 'source ~/.bashrc' || '' }}
          # To expose stuff for pnpm directly on macOS (because otherwise the pre-installed Node.js version gets used):
          ${{ matrix.os == 'macos-latest' && 'export PNPM_HOME=~/Library/pnpm; export PATH=$PNPM_HOME:$PATH' || '' }}

      - name: Check that `build:fast` works in the clean repo
        run: |
          yarn install
          yarn build:fast
          yarn clean

      - name: Prepare Tact compiler
        run: |
          # There are issues with corepack + it disallows the use of pnpm for linkage later on
          # It's only useful for making sure that Tact compiler developers use the same version of Yarn
          # https://github.com/nodejs/corepack/issues/112
          # corepack enable
          yarn install
          yarn clean
          yarn cross-env BUILD_THREADS=4 yarn gen
          yarn build

      - name: (${{ matrix.package-manager }}) Setup a new Blueprint project
        run: |
          # To help pnpm recognize the shell (they cannot do it themselves sometimes...)
          ${{ matrix.os != 'windows-latest' && 'export SHELL=bash' || '' }}

          # Linkage for npm, yarn, bun, pnpm
          ${{ matrix.package-manager == 'npm' && 'npm link' || '' }}
          ${{ matrix.package-manager == 'yarn' && 'yarn link' || '' }}
          ${{ matrix.package-manager == 'bun' && 'bun link' || '' }}
          ${{ matrix.package-manager == 'pnpm' && 'pnpm link -g' || '' }}

          # Create an empty Blueprint project
          #
          # The 'npm create ton@latest' command works fine even in PowerShell,
          # but it fails on Windows in GitHub Actions because of weird -- expansion
          ${{
            matrix.package-manager == 'npm'
            && 'npx create-ton@latest test-project --no-ci'
            || ''
          }}
          ${{
            matrix.package-manager == 'yarn'
            && 'yarn create ton test-project --no-ci'
            || ''
          }}
          ${{
            matrix.package-manager == 'bun'
            && 'bun create ton@latest test-project --no-ci'
            || ''
          }}
          ${{
            matrix.package-manager == 'pnpm'
            && 'cd ..; pnpm create ton@latest test-project --no-ci'
            || ''
          }}

          # Hijack dependencies on Tact to avoid redundant npm downloads
          cd test-project
          jq 'to_entries | map(if .value | type == "object" then .value |= del(."@tact-lang/compiler") else . end) | from_entries' package.json ${{
            matrix.os == 'windows-latest'
            && '-M | Set-Content'
            || '>' }} temp.json
          ${{ matrix.os == 'windows-latest' && 'Move-Item -Force' || 'mv -f' }} temp.json package.json

          # Setup the linkage to Tact compiler and install dependencies
          ${{
            matrix.package-manager == 'npm'
            && 'npm link @tact-lang/compiler; npm install'
            || ''
          }}
          ${{
            matrix.package-manager == 'yarn'
            && 'yarn link @tact-lang/compiler; yarn install'
            || ''
          }}
          ${{
            matrix.package-manager == 'bun'
            && 'bun link @tact-lang/compiler; bun install'
            || ''
          }}
          ${{
            matrix.package-manager == 'pnpm'
            && 'pnpm link -g @tact-lang/compiler; pnpm install'
            || ''
          }}

          # Create a new contract and all related facilities
          ${{ matrix.package-manager == 'bun' && 'bunx' || 'npx' }} blueprint create --type tact-counter Counter

      - name: (npm) Test a new Blueprint project
        if: ${{ matrix.package-manager == 'npm' }}
        working-directory: "test-project"
        run: |
          npm run build
          npm run test

      - name: (npm) Test Tact and Blueprint installs in existing projects
        if: ${{ matrix.package-manager == 'npm' }}
        run: |
          # Out of the box, only npm experiences issues
          # with lifecycle scripts of installed dependencies
          mkdir npm-test && cd npm-test
          npm init -y
          npm i ../  # installing compiler relatively
          npm i @ton/blueprint

      - name: (yarn) Test a new Blueprint project
        if: ${{ matrix.package-manager == 'yarn' }}
        working-directory: "test-project"
        run: |
          yarn build
          yarn test

      - name: (bun) Test a new Blueprint project
        if: ${{ matrix.package-manager == 'bun' }}
        working-directory: "test-project"
        run: |
          bun run build # without 'run' Bun will use its own bundler
          bun run test  # without 'run' Bun will use its own test runner

      - name: (pnpm) Test a new Blueprint project
        if: ${{ matrix.package-manager == 'pnpm' }}
        working-directory: "../test-project"
        run: |
          # To help pnpm recognize the shell (they cannot do it themselves sometimes...)
          ${{ matrix.os != 'windows-latest' && 'export SHELL=bash' || '' }}
          pnpm build
          pnpm test
