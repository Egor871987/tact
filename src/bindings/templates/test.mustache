// !!THIS FILE IS GENERATED BY TACT. THIS FILE IS REGENERATED EVERY TIME, COPY IT TO YOUR PROJECT MANUALLY!!
// https://docs.tact-lang.org/book/debug/

{{#imports}}
import {{{.}}};
{{/imports}}

export type FromInit{{contractName}} = typeof {{contractName}}.fromInit;

export type TestCase = (fromInit: FromInit{{contractName}}) => void;

export const test{{contractName}} = (fromInit: FromInit{{contractName}}) => {
    describe("{{contractName}} Contract", () => {
        // Test receivers
{{#receivers}}
        test{{.}}(fromInit);
{{/receivers}}
        // Test getters
{{#getters}}
        getterTest{{.}}(fromInit);
{{/getters}}
    });
};

const globalSetup = async (fromInit: FromInit{{contractName}}) => {
    const blockchain = await Blockchain.create();
    // @ts-ignore
    const contract = await blockchain.openContract(await fromInit(
        // TODO: implement default values
    ));
        
    // Universal method for deploy contract without sending message
    await blockchain.setShardAccount(contract.address, createShardAccount({
        address: contract.address,
        code: contract.init!.code,
        data: contract.init!.data,
        balance: 0n,
        workchain: 0
    }));
        
    const owner = await blockchain.treasury("owner");
    const notOwner = await blockchain.treasury("notOwner");

    return { blockchain, contract, owner, notOwner };
};

{{#receiverBlocks}}
{{{.}}}
{{/receiverBlocks}}
{{#getterBlocks}}
{{{.}}}
{{/getterBlocks}}
// entry point
test{{contractName}}({{contractName}}.fromInit.bind({{contractName}})); 