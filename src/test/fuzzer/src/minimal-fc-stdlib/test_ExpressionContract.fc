#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; test_ExpressionContract.headers.fc
;;
;; Header files for ExpressionContract
;; NOTE: declarations are sorted for optimal order
;;

;; $ExpressionContract$_contract_load
tuple $ExpressionContract$_contract_load() impure inline;

;; $ExpressionContract$_fun_getInt
(tuple, int) $ExpressionContract$_fun_getInt(tuple $self) impure inline_ref;


;; test_ExpressionContract.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

;; test_ExpressionContract.constants.fc
;; Cell M3SNWue6TyiN/K1NlBmYjNXWdXcUUiL03IMj/ByDqvg=
cell __gen_cell_cell_33748d5ae7ba4f288dfcad4d9419988cd5d67577145222f4dc8323fc1c83aaf8() asm """
    B{b5ee9c7241010101000700000ab1e0c40aeffb0954b4} B>boc PUSHREF
""";

;; Slice CvNSYRa6myx2M/QzHgduai1xfAzgyQ+4+qzFt7EcZo4=
slice __gen_slice_slice_0af3526116ba9b2c7633f4331e076e6a2d717c0ce0c90fb8faacc5b7b11c668e() asm """
    B{b5ee9c7241010101000900000e444cab48619527a3070b66} B>boc <s PUSHSLICE
""";

;; EQBEKb0HN_8U3ram1G7XZnlVxeG_fcaA1HZ4J0l_qojFwsMw
slice __gen_slice_address_0f1541b9d5a516ab28e377f279b5bf23def72aea03bf02e623477c8140316475() asm """
    B{b5ee9c7241010101002400004380088537a0e6ffe29bd6d4da8ddaeccf2ab8bc37efb8d01a8ecf04e92ff55118b850a47e7dc9} B>boc <s PUSHSLICE
""";

;; String "&&"
slice __gen_slice_string_bb614895fa609f8b1868ef98c5dcf6477947b6d757ef13bedcd96d9a695596d3() asm """
    B{b5ee9c724101010100040000042626d54c1fd5} B>boc <s PUSHSLICE
""";

;; test_ExpressionContract.storage.fc
;;
;; Type: ExpressionContract
;; TLB: _  = ExpressionContract
;;

tuple $ExpressionContract$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    return null();
}

;;
;; Contract ExpressionContract functions
;;

(tuple, int) $ExpressionContract$_fun_getInt(tuple $self) impure inline_ref {
    var ($self) = $self;
    int $int1 = -1;
    int $int_null = null();
    int $bool1 = true;
    int $bool_null = null();
    cell $cell1 = __gen_cell_cell_33748d5ae7ba4f288dfcad4d9419988cd5d67577145222f4dc8323fc1c83aaf8();
    cell $opt_cell = null();
    slice $slice1 = __gen_slice_slice_0af3526116ba9b2c7633f4331e076e6a2d717c0ce0c90fb8faacc5b7b11c668e();
    slice $slice_null = null();
    slice $address1 = __gen_slice_address_0f1541b9d5a516ab28e377f279b5bf23def72aea03bf02e623477c8140316475();
    slice $address_null = null();
    slice $string1 = __gen_slice_string_bb614895fa609f8b1868ef98c5dcf6477947b6d757ef13bedcd96d9a695596d3();
    slice $string_null = null();
    var $fresh$ret_0 = ((~ ($int1 + $int1)) % (~ (~ (~ (~ $int1)))));
    return ($self, $fresh$ret_0);
}

;;
;; Get methods of a Contract ExpressionContract
;;

_ %getInt() method_id(110684) {
    var self = $ExpressionContract$_contract_load();
    var res = self~$ExpressionContract$_fun_getInt();
    return res;
}

;;
;; Routing of a Contract ExpressionContract
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $ExpressionContract$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}