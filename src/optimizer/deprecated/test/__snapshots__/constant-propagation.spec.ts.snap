// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`constant-propagation should fail constant propagation analysis for assignments 1`] = `
"<unknown>:11:14: Cannot evaluate expression to a constant: divisor expression must be non-zero
  10 |         b += a + 1;              // 12
> 11 |         1 / (b - 12);             // Division by zero
                    ^~~~~~
  12 |         return 0;
"
`;

exports[`constant-propagation should fail constant propagation analysis for global-function 1`] = `
"<unknown>:11:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  10 |     }
> 11 |     return 1 / (a - 20);   // Division by zero
                       ^~~~~~
  12 | }                           
"
`;

exports[`constant-propagation should fail constant propagation analysis for init 1`] = `
"<unknown>:25:14: Cannot evaluate expression to a constant: divisor expression must be non-zero
  24 |         // self.f.Bb / self.f.Bb;     // Commented because it would cause a division by zero.
> 25 |         1 / (self.f.Bc - self.f.Bc);  // Division by zero             
                    ^~~~~~~~~~~~~~~~~~~~~
  26 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for initof-1 1`] = `
"<unknown>:9:18: Cannot evaluate expression to a constant: divisor expression must be non-zero
   8 |     init(v: Int) {
>  9 |         self.a / self.a;    // Division by zero
                        ^~~~
  10 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for inside-do-until 1`] = `
"<unknown>:10:25: Cannot evaluate expression to a constant: divisor expression must be non-zero
   9 |         do {                             
> 10 |             return 1 / (a - 5);          // Since the loop executes at least once, and a = 5,
                               ^~~~~
  11 |         } until (x > 0);                 // a division by zero will occur.                        
"
`;

exports[`constant-propagation should fail constant propagation analysis for inside-repeat 1`] = `
"<unknown>:10:25: Cannot evaluate expression to a constant: divisor expression must be non-zero
   9 |         repeat (x) {                     
> 10 |             return 1 / (a - 5);          // Loop executes at least once: division by zero
                               ^~~~~
  11 |         }                                
"
`;

exports[`constant-propagation should fail constant propagation analysis for inside-while 1`] = `
"<unknown>:10:25: Cannot evaluate expression to a constant: divisor expression must be non-zero
   9 |         while (x >= 0) {                  
> 10 |             return 1 / (a - 5);          // Loop executes at least once: division by zero
                               ^~~~~
  11 |         }                                
"
`;

exports[`constant-propagation should fail constant propagation analysis for null-dereference 1`] = `
"<unknown>:14:12: Cannot evaluate expression to a constant: non-null value expected but got null
  13 |     a!!;             // OK
> 14 |     return b!!;      // Null dereference
                  ^
  15 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-do-until-no-iterations 1`] = `
"<unknown>:12:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 |         } until (x >= 0);                                
> 12 |         return 1 / (a - 6);        // Loop does not execute more than once. Hence, after the loop, a = 6,
                           ^~~~~
  13 |     }                              // which means division by zero.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-do-until-with-iterations 1`] = `
"<unknown>:14:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  13 |         } until (x > 0);                                
> 14 |         return 1 / (a - 10);        // Loop executes more than once. Hence, but after each loop iteration, a = 10,
                           ^~~~~~
  15 |     }                               // which means division by zero.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-else-false-branch 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }
> 13 |         return 1 / (a - 3);   // Division by zero, because condition in the if is false at compile time,                             
                           ^~~~~
  14 |     }                         // which means that a = 3 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-else-true-branch 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }
> 13 |         return 1 / (a - 10);   // Division by zero, because condition in the if is true at compile time,                             
                           ^~~~~~
  14 |     }                          // which means that a = 10 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-elseif-false-branch 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }
> 13 |         return 1 / (a - 3);   // Division by zero, because conditions can be determined at compile time,                             
                           ^~~~~
  14 |     }                         // which means that a = 3 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-elseif-true-branch 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }
> 13 |         return 1 / (a - 10);   // Division by zero, because conditions can be determined at compile time,                              
                           ^~~~~~
  14 |     }                          // which means that a = 10 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-false 1`] = `
"<unknown>:11:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  10 |         }
> 11 |         return 1 / (a - 5);   // Division by zero, because condition in the if is false at compile time,                             
                           ^~~~~
  12 |     }                         // which means that a = 5 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-true 1`] = `
"<unknown>:11:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  10 |         }
> 11 |         return 1 / (a - 10);   // Division by zero, because condition in the if is true at compile time,                             
                           ^~~~~~
  12 |     }                          // which means that a = 10 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-repeat-no-iterations 1`] = `
"<unknown>:12:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 |         }                                
> 12 |         return 1 / (a - 5);         // Loop does not execute. Hence, after the loop, a = 5,
                           ^~~~~
  13 |     }                               // which means division by zero.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-repeat-with-iterations 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }                                
> 13 |         return 1 / (a - 3);         // Loop executes. After each iteration, a = 3,
                           ^~~~~
  14 |     }                               // which means division by zero after the loop.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-repeat-with-iterations_explicit-loop-run 1`] = `
"<unknown>:12:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 |         }                           // Analyzer will explicitly run repeats only if below or equal to the current limit at 2 ^ 12 = 4096 times.
> 12 |         return 1 / (a - 105);         
                           ^~~~~~~
  13 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-while-no-iterations 1`] = `
"<unknown>:12:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 |         }                                
> 12 |         return 1 / (a - 5);         // Loop does not execute. Hence, after the loop, a = 5,
                           ^~~~~
  13 |     }                               // which means division by zero.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-while-with-iterations 1`] = `
"<unknown>:14:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  13 |         }                                
> 14 |         return 1 / (a - 12);         // Loop executes. After each iteration, a = 3,
                           ^~~~~~
  15 |     }                               // which means division by zero after the loop.
"
`;

exports[`constant-propagation should fail constant propagation analysis for overflow-1 1`] = `
"<unknown>:13:12: Cannot evaluate expression to a constant: integer '115792089237316195423570985008687907853269984665640564039457584007913129639936' does not fit into TVM Int type
  12 | 
> 13 |     return n << exponent;      // Overflow reported: 1 * 2^256
                  ^~~~~~~~~~~~~
  14 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for overflow-2 1`] = `
"<unknown>:11:18: Cannot evaluate expression to a constant: integer '115792089237316195423570985008687907853269984665640564039457584007913129639936' does not fit into TVM Int type
  10 |         exponent += 1;              
> 11 |         result = n << exponent;     // Reported overflow in the 10th iteration.
                        ^~~~~~~~~~~~~
  12 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for short-circuit-and 1`] = `
"<unknown>:13:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |     let c: Bool = b && a.mutator();    // Since && short-circuits, "a" remains with value a = 10
> 13 |     return 1 / (a - 10);               // Division by zero.
                       ^~~~~~
  14 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for short-circuit-or 1`] = `
"<unknown>:13:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |     let c: Bool = b || a.mutator();    // Since || short-circuits, "a" remains with value a = 10
> 13 |     return 1 / (a - 10);               // Division by zero.
                       ^~~~~~
  14 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for static-calls 1`] = `
"<unknown>:7:16: Cannot evaluate expression to a constant: divisor expression must be non-zero
  6 |     } else {
> 7 |         return b;
                     ^
  8 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for ternary-operator-1 1`] = `
"<unknown>:13:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |     let c: Bool = b ? false : a.mutator();    // "a" remains with value a = 10
> 13 |     return 1 / (a - 10);               // Division by zero.
                       ^~~~~~
  14 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for ternary-operator-2 1`] = `
"<unknown>:13:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |     let c: Bool = b ? a.mutator() : false;    // "a" remains with value a = 10
> 13 |     return 1 / (a - 10);               // Division by zero.
                       ^~~~~~
  14 | }
"
`;

exports[`constant-propagation should pass constant propagation analysis for inside-foreach 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "emptyMap()",
    "<null>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-foreach 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-if 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-if 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-if-else-false-branch 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a >= 5",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-if-else-false-branch 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-if-else-true-branch 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-if-else-true-branch 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-repeat 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-repeat 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-while 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x > 0",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-while 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-do-until 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "v > 0",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-do-until 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-do-until-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x >= 10",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "15",
    "Int",
  ],
  [
    "a - 15",
    "Int",
  ],
  [
    "1 / (a - 15)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-do-until-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-foreach 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "emptyMap()",
    "<null>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "xMap.set(1,1)",
    "<void>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "k",
    "Int",
  ],
  [
    "10 + k",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-foreach 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-foreach-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "emptyMap()",
    "<null>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "xMap.set(1,1)",
    "<void>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "k",
    "Int",
  ],
  [
    "10 + k",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-foreach-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-false-branch 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "7",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "a - 6",
    "Int",
  ],
  [
    "1 / (a - 6)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-false-branch 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-false-branch-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "x",
    "Int",
  ],
  [
    "7",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-false-branch-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-true-branch 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a >= 5",
    "Bool",
  ],
  [
    "x",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "a - 6",
    "Int",
  ],
  [
    "1 / (a - 6)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-true-branch 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-true-branch-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "x",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-true-branch-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-elseif 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v > 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-elseif 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-elseif-else-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "x",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "x > 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "7",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-elseif-else-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v - v",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "v - v + 6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat-with-iterations_return-inside 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "1048576",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v - v",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "v - v + 3",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "a - 3",
    "Int",
  ],
  [
    "1 / (a - 3)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat-with-iterations_return-inside 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-while 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "v > 0",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v - v",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "v - v + 6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-while 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-while-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x > 0",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "x",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-while-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-while-with-iterations_return-inside 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x >= 10",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v - v",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "v - v + 3",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "a - 3",
    "Int",
  ],
  [
    "1 / (a - 3)",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-while-with-iterations_return-inside 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for short-circuit-and 1`] = `
[
  [
    "10",
    "Int",
  ],
  [
    "b",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutator()",
    "Bool",
  ],
  [
    "b && a.mutator()",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a - 10",
    "Int",
  ],
  [
    "1 / (a - 10)",
    "Int",
  ],
  [
    "self",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "false",
    "Bool",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for short-circuit-and 2`] = `
[
  {
    "ast": {
      "attributes": [],
      "id": 40,
      "kind": "function_def",
      "loc": {},
      "name": {
        "id": 16,
        "kind": "id",
        "loc": {},
        "text": "foo",
      },
      "params": [
        {
          "id": 20,
          "kind": "typed_parameter",
          "loc": {},
          "name": {
            "id": 18,
            "kind": "id",
            "loc": {},
            "text": "b",
          },
          "type": {
            "id": 19,
            "kind": "type_id",
            "loc": {},
            "text": "Bool",
          },
        },
      ],
      "return": {
        "id": 17,
        "kind": "type_id",
        "loc": {},
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "base": 10,
            "id": 23,
            "kind": "number",
            "loc": {},
            "value": 10n,
          },
          "id": 24,
          "kind": "statement_let",
          "loc": {},
          "name": {
            "id": 21,
            "kind": "id",
            "loc": {},
            "text": "a",
          },
          "type": {
            "id": 22,
            "kind": "type_id",
            "loc": {},
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 32,
            "kind": "op_binary",
            "left": {
              "id": 27,
              "kind": "id",
              "loc": {},
              "text": "b",
            },
            "loc": {},
            "op": "&&",
            "right": {
              "args": [],
              "id": 31,
              "kind": "method_call",
              "loc": {},
              "method": {
                "id": 29,
                "kind": "id",
                "loc": {},
                "text": "mutator",
              },
              "self": {
                "id": 28,
                "kind": "id",
                "loc": {},
                "text": "a",
              },
            },
          },
          "id": 33,
          "kind": "statement_let",
          "loc": {},
          "name": {
            "id": 25,
            "kind": "id",
            "loc": {},
            "text": "c",
          },
          "type": {
            "id": 26,
            "kind": "type_id",
            "loc": {},
            "text": "Bool",
          },
        },
        {
          "expression": {
            "id": 38,
            "kind": "op_binary",
            "left": {
              "base": 10,
              "id": 34,
              "kind": "number",
              "loc": {},
              "value": 1n,
            },
            "loc": {},
            "op": "/",
            "right": {
              "id": 37,
              "kind": "op_binary",
              "left": {
                "id": 35,
                "kind": "id",
                "loc": {},
                "text": "a",
              },
              "loc": {},
              "op": "-",
              "right": {
                "base": 10,
                "id": 36,
                "kind": "number",
                "loc": {},
                "value": 10n,
              },
            },
          },
          "id": 39,
          "kind": "statement_return",
          "loc": {},
        },
      ],
    },
    "isAbstract": false,
    "isGetter": false,
    "isInline": false,
    "isMutating": false,
    "isOverride": false,
    "isVirtual": false,
    "methodId": null,
    "name": "foo",
    "origin": "user",
    "params": [
      {
        "loc": {},
        "name": {
          "id": 18,
          "kind": "id",
          "loc": {},
          "text": "b",
        },
        "type": {
          "kind": "ref",
          "name": "Bool",
          "optional": false,
        },
      },
    ],
    "returns": {
      "kind": "ref",
      "name": "Int",
      "optional": false,
    },
    "self": null,
  },
]
`;

exports[`constant-propagation should pass constant propagation analysis for short-circuit-or 1`] = `
[
  [
    "10",
    "Int",
  ],
  [
    "b",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutator()",
    "Bool",
  ],
  [
    "b || a.mutator()",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a - 10",
    "Int",
  ],
  [
    "1 / (a - 10)",
    "Int",
  ],
  [
    "self",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "false",
    "Bool",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for short-circuit-or 2`] = `
[
  {
    "ast": {
      "attributes": [],
      "id": 40,
      "kind": "function_def",
      "loc": {},
      "name": {
        "id": 16,
        "kind": "id",
        "loc": {},
        "text": "foo",
      },
      "params": [
        {
          "id": 20,
          "kind": "typed_parameter",
          "loc": {},
          "name": {
            "id": 18,
            "kind": "id",
            "loc": {},
            "text": "b",
          },
          "type": {
            "id": 19,
            "kind": "type_id",
            "loc": {},
            "text": "Bool",
          },
        },
      ],
      "return": {
        "id": 17,
        "kind": "type_id",
        "loc": {},
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "base": 10,
            "id": 23,
            "kind": "number",
            "loc": {},
            "value": 10n,
          },
          "id": 24,
          "kind": "statement_let",
          "loc": {},
          "name": {
            "id": 21,
            "kind": "id",
            "loc": {},
            "text": "a",
          },
          "type": {
            "id": 22,
            "kind": "type_id",
            "loc": {},
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 32,
            "kind": "op_binary",
            "left": {
              "id": 27,
              "kind": "id",
              "loc": {},
              "text": "b",
            },
            "loc": {},
            "op": "||",
            "right": {
              "args": [],
              "id": 31,
              "kind": "method_call",
              "loc": {},
              "method": {
                "id": 29,
                "kind": "id",
                "loc": {},
                "text": "mutator",
              },
              "self": {
                "id": 28,
                "kind": "id",
                "loc": {},
                "text": "a",
              },
            },
          },
          "id": 33,
          "kind": "statement_let",
          "loc": {},
          "name": {
            "id": 25,
            "kind": "id",
            "loc": {},
            "text": "c",
          },
          "type": {
            "id": 26,
            "kind": "type_id",
            "loc": {},
            "text": "Bool",
          },
        },
        {
          "expression": {
            "id": 38,
            "kind": "op_binary",
            "left": {
              "base": 10,
              "id": 34,
              "kind": "number",
              "loc": {},
              "value": 1n,
            },
            "loc": {},
            "op": "/",
            "right": {
              "id": 37,
              "kind": "op_binary",
              "left": {
                "id": 35,
                "kind": "id",
                "loc": {},
                "text": "a",
              },
              "loc": {},
              "op": "-",
              "right": {
                "base": 10,
                "id": 36,
                "kind": "number",
                "loc": {},
                "value": 10n,
              },
            },
          },
          "id": 39,
          "kind": "statement_return",
          "loc": {},
        },
      ],
    },
    "isAbstract": false,
    "isGetter": false,
    "isInline": false,
    "isMutating": false,
    "isOverride": false,
    "isVirtual": false,
    "methodId": null,
    "name": "foo",
    "origin": "user",
    "params": [
      {
        "loc": {},
        "name": {
          "id": 18,
          "kind": "id",
          "loc": {},
          "text": "b",
        },
        "type": {
          "kind": "ref",
          "name": "Bool",
          "optional": false,
        },
      },
    ],
    "returns": {
      "kind": "ref",
      "name": "Int",
      "optional": false,
    },
    "self": null,
  },
]
`;
