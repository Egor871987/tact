// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`constant-propagation should pass constant propagation analysis for inside-foreach 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "emptyMap()",
    "<null>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-foreach 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-if 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-if 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-if-else-false-branch 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a >= 5",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-if-else-false-branch 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-if-else-true-branch 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-if-else-true-branch 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-repeat 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-repeat 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for inside-while 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x > 0",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for inside-while 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-do-until 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "v > 0",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-do-until 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-do-until-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x >= 10",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "15",
    "Int",
  ],
  [
    "a - 15",
    "Int",
  ],
  [
    "1 / (a - 15)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-do-until-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-foreach 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "emptyMap()",
    "<null>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "xMap.set(1,1)",
    "<void>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "k",
    "Int",
  ],
  [
    "10 + k",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-foreach 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-foreach-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "emptyMap()",
    "<null>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "xMap.set(1,1)",
    "<void>",
  ],
  [
    "xMap",
    "map<Int, Int>",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "k",
    "Int",
  ],
  [
    "10 + k",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-foreach-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-false-branch 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "7",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "a - 6",
    "Int",
  ],
  [
    "1 / (a - 6)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-false-branch 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-false-branch-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "x",
    "Int",
  ],
  [
    "7",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-false-branch-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-true-branch 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a >= 5",
    "Bool",
  ],
  [
    "x",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "a - 6",
    "Int",
  ],
  [
    "1 / (a - 6)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-true-branch 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-true-branch-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a > 5",
    "Bool",
  ],
  [
    "x",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-else-no-assign-true-branch-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-elseif 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v > 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-elseif 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-elseif-else-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "x",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "x > 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "7",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-elseif-else-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "v >= 5",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-if-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v - v",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "v - v + 6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat-with-iterations_return-inside 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "1048576",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v - v",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "v - v + 3",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "a - 3",
    "Int",
  ],
  [
    "1 / (a - 3)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-repeat-with-iterations_return-inside 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-while 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "v > 0",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v - v",
    "Int",
  ],
  [
    "6",
    "Int",
  ],
  [
    "v - v + 6",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-while 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-while-mutatingFun 1`] = `
[
  [
    "self",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x > 0",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutateFun()",
    "<void>",
  ],
  [
    "x",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-while-mutatingFun 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for outside-while-with-iterations_return-inside 1`] = `
[
  [
    "5",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "x >= 10",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "v - v",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "v - v + 3",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "a - 3",
    "Int",
  ],
  [
    "1 / (a - 3)",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "5",
    "Int",
  ],
  [
    "a - 5",
    "Int",
  ],
  [
    "1 / (a - 5)",
    "Int",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for outside-while-with-iterations_return-inside 2`] = `[]`;

exports[`constant-propagation should pass constant propagation analysis for short-circuit-and 1`] = `
[
  [
    "10",
    "Int",
  ],
  [
    "b",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutator()",
    "Bool",
  ],
  [
    "b && a.mutator()",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a - 10",
    "Int",
  ],
  [
    "1 / (a - 10)",
    "Int",
  ],
  [
    "self",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "false",
    "Bool",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for short-circuit-and 2`] = `
[
  {
    "ast": {
      "attributes": [],
      "id": 40,
      "kind": "function_def",
      "loc": {},
      "name": {
        "id": 16,
        "kind": "id",
        "loc": {},
        "text": "foo",
      },
      "params": [
        {
          "id": 20,
          "kind": "typed_parameter",
          "loc": {},
          "name": {
            "id": 18,
            "kind": "id",
            "loc": {},
            "text": "b",
          },
          "type": {
            "id": 19,
            "kind": "type_id",
            "loc": {},
            "text": "Bool",
          },
        },
      ],
      "return": {
        "id": 17,
        "kind": "type_id",
        "loc": {},
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "base": 10,
            "id": 23,
            "kind": "number",
            "loc": {},
            "value": 10n,
          },
          "id": 24,
          "kind": "statement_let",
          "loc": {},
          "name": {
            "id": 21,
            "kind": "id",
            "loc": {},
            "text": "a",
          },
          "type": {
            "id": 22,
            "kind": "type_id",
            "loc": {},
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 32,
            "kind": "op_binary",
            "left": {
              "id": 27,
              "kind": "id",
              "loc": {},
              "text": "b",
            },
            "loc": {},
            "op": "&&",
            "right": {
              "args": [],
              "id": 31,
              "kind": "method_call",
              "loc": {},
              "method": {
                "id": 29,
                "kind": "id",
                "loc": {},
                "text": "mutator",
              },
              "self": {
                "id": 28,
                "kind": "id",
                "loc": {},
                "text": "a",
              },
            },
          },
          "id": 33,
          "kind": "statement_let",
          "loc": {},
          "name": {
            "id": 25,
            "kind": "id",
            "loc": {},
            "text": "c",
          },
          "type": {
            "id": 26,
            "kind": "type_id",
            "loc": {},
            "text": "Bool",
          },
        },
        {
          "expression": {
            "id": 38,
            "kind": "op_binary",
            "left": {
              "base": 10,
              "id": 34,
              "kind": "number",
              "loc": {},
              "value": 1n,
            },
            "loc": {},
            "op": "/",
            "right": {
              "id": 37,
              "kind": "op_binary",
              "left": {
                "id": 35,
                "kind": "id",
                "loc": {},
                "text": "a",
              },
              "loc": {},
              "op": "-",
              "right": {
                "base": 10,
                "id": 36,
                "kind": "number",
                "loc": {},
                "value": 10n,
              },
            },
          },
          "id": 39,
          "kind": "statement_return",
          "loc": {},
        },
      ],
    },
    "isAbstract": false,
    "isGetter": false,
    "isInline": false,
    "isMutating": false,
    "isOverride": false,
    "isVirtual": false,
    "methodId": null,
    "name": "foo",
    "origin": "user",
    "params": [
      {
        "loc": {},
        "name": {
          "id": 18,
          "kind": "id",
          "loc": {},
          "text": "b",
        },
        "type": {
          "kind": "ref",
          "name": "Bool",
          "optional": false,
        },
      },
    ],
    "returns": {
      "kind": "ref",
      "name": "Int",
      "optional": false,
    },
    "self": null,
  },
]
`;

exports[`constant-propagation should pass constant propagation analysis for short-circuit-or 1`] = `
[
  [
    "10",
    "Int",
  ],
  [
    "b",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a.mutator()",
    "Bool",
  ],
  [
    "b || a.mutator()",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a - 10",
    "Int",
  ],
  [
    "1 / (a - 10)",
    "Int",
  ],
  [
    "self",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "false",
    "Bool",
  ],
]
`;

exports[`constant-propagation should pass constant propagation analysis for short-circuit-or 2`] = `
[
  {
    "ast": {
      "attributes": [],
      "id": 40,
      "kind": "function_def",
      "loc": {},
      "name": {
        "id": 16,
        "kind": "id",
        "loc": {},
        "text": "foo",
      },
      "params": [
        {
          "id": 20,
          "kind": "typed_parameter",
          "loc": {},
          "name": {
            "id": 18,
            "kind": "id",
            "loc": {},
            "text": "b",
          },
          "type": {
            "id": 19,
            "kind": "type_id",
            "loc": {},
            "text": "Bool",
          },
        },
      ],
      "return": {
        "id": 17,
        "kind": "type_id",
        "loc": {},
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "base": 10,
            "id": 23,
            "kind": "number",
            "loc": {},
            "value": 10n,
          },
          "id": 24,
          "kind": "statement_let",
          "loc": {},
          "name": {
            "id": 21,
            "kind": "id",
            "loc": {},
            "text": "a",
          },
          "type": {
            "id": 22,
            "kind": "type_id",
            "loc": {},
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 32,
            "kind": "op_binary",
            "left": {
              "id": 27,
              "kind": "id",
              "loc": {},
              "text": "b",
            },
            "loc": {},
            "op": "||",
            "right": {
              "args": [],
              "id": 31,
              "kind": "method_call",
              "loc": {},
              "method": {
                "id": 29,
                "kind": "id",
                "loc": {},
                "text": "mutator",
              },
              "self": {
                "id": 28,
                "kind": "id",
                "loc": {},
                "text": "a",
              },
            },
          },
          "id": 33,
          "kind": "statement_let",
          "loc": {},
          "name": {
            "id": 25,
            "kind": "id",
            "loc": {},
            "text": "c",
          },
          "type": {
            "id": 26,
            "kind": "type_id",
            "loc": {},
            "text": "Bool",
          },
        },
        {
          "expression": {
            "id": 38,
            "kind": "op_binary",
            "left": {
              "base": 10,
              "id": 34,
              "kind": "number",
              "loc": {},
              "value": 1n,
            },
            "loc": {},
            "op": "/",
            "right": {
              "id": 37,
              "kind": "op_binary",
              "left": {
                "id": 35,
                "kind": "id",
                "loc": {},
                "text": "a",
              },
              "loc": {},
              "op": "-",
              "right": {
                "base": 10,
                "id": 36,
                "kind": "number",
                "loc": {},
                "value": 10n,
              },
            },
          },
          "id": 39,
          "kind": "statement_return",
          "loc": {},
        },
      ],
    },
    "isAbstract": false,
    "isGetter": false,
    "isInline": false,
    "isMutating": false,
    "isOverride": false,
    "isVirtual": false,
    "methodId": null,
    "name": "foo",
    "origin": "user",
    "params": [
      {
        "loc": {},
        "name": {
          "id": 18,
          "kind": "id",
          "loc": {},
          "text": "b",
        },
        "type": {
          "kind": "ref",
          "name": "Bool",
          "optional": false,
        },
      },
    ],
    "returns": {
      "kind": "ref",
      "name": "Int",
      "optional": false,
    },
    "self": null,
  },
]
`;
